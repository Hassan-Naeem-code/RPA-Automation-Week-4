Metadata-Version: 2.4
Name: flight-automation-system
Version: 1.0.0
Summary: Production-ready flight booking automation system with performance optimization
Home-page: https://github.com/company/flight-automation-system
Author: Flight Automation Team
Author-email: Flight Automation Team <automation@company.com>
License: MIT
Project-URL: Homepage, https://github.com/company/flight-automation-system
Project-URL: Documentation, https://flight-automation-system.readthedocs.io/
Project-URL: Repository, https://github.com/company/flight-automation-system.git
Project-URL: Bug Reports, https://github.com/company/flight-automation-system/issues
Keywords: automation,flight booking,data processing,performance optimization
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Office/Business :: Financial
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: pandas>=2.0.0
Requires-Dist: faker>=19.0.0
Requires-Dist: psutil>=5.9.0
Requires-Dist: tenacity>=8.2.0
Requires-Dist: pyyaml>=6.0
Requires-Dist: colorama>=0.4.6
Provides-Extra: dev
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: flake8>=6.0.0; extra == "dev"
Requires-Dist: isort>=5.12.0; extra == "dev"
Requires-Dist: mypy>=1.5.0; extra == "dev"
Requires-Dist: pre-commit>=3.3.0; extra == "dev"
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: pytest-mock>=3.10.0; extra == "dev"
Requires-Dist: bandit>=1.7.5; extra == "dev"
Requires-Dist: safety>=2.3.0; extra == "dev"
Provides-Extra: test
Requires-Dist: pytest>=7.0.0; extra == "test"
Requires-Dist: pytest-cov>=4.0.0; extra == "test"
Requires-Dist: pytest-mock>=3.10.0; extra == "test"
Dynamic: author
Dynamic: home-page
Dynamic: requires-python

# Flight Booking Automation System

[![Python Version](https://img.shields.io/badge/python-3.11+-blue.svg)](https://python.org)
[![License](https://img.shields.io/badge/license-MIT-green.svg)](LICENSE)
[![Code Style](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)

A production-ready automation system for processing flight booking confirmations with robust error handling, performance optimization, and comprehensive monitoring.

## 🚀 Performance Achievement
- **94.5% performance improvement** (334s → 17s)
- **1560% throughput increase** (0.6 → 10.7 records/second)
- **Production-ready** with comprehensive error handling and monitoring

## 📁 Project Structure

```
flight-booking-automation/
├── flight_automation/          # Main package
│   ├── __init__.py            # Package initialization
│   ├── core/                  # Core business logic
│   │   ├── __init__.py
│   │   ├── data_processor.py  # Data processing engine
│   │   └── validation.py      # Data validation rules
│   ├── services/              # External services
│   │   ├── __init__.py
│   │   ├── email_service.py   # Email confirmation service
│   │   └── reporting.py       # Report generation service
│   └── utils/                 # Utility functions
│       ├── __init__.py
│       ├── logger.py          # Logging configuration
│       └── metrics.py         # Performance metrics
├── config/                    # Configuration files
│   ├── settings.yaml          # Application settings
│   ├── logging.yaml           # Logging configuration
│   └── email_templates.yaml   # Email templates
├── data/                      # Data files
│   ├── input/                 # Input data directory
│   ├── output/                # Processed data output
│   └── sample/                # Sample data for testing
├── tests/                     # Test suite
│   ├── unit/                  # Unit tests
│   ├── integration/           # Integration tests
│   └── conftest.py           # Test configuration
├── scripts/                   # Utility scripts
│   ├── run_automation.py      # Main execution script
│   ├── generate_data.py       # Data generation utility
│   └── performance_test.py    # Performance testing
├── docs/                      # Documentation
│   ├── api/                   # API documentation
│   ├── troubleshooting.md     # Debugging guide
│   └── deployment.md          # Deployment instructions
├── logs/                      # Log files
├── reports/                   # Generated reports
├── requirements.txt           # Python dependencies
├── requirements-dev.txt       # Development dependencies
├── setup.py                   # Package setup
├── pyproject.toml            # Modern Python project config
├── .gitignore                # Git ignore rules
├── .pre-commit-config.yaml   # Pre-commit hooks
├── Dockerfile                # Container configuration
├── docker-compose.yml        # Multi-container setup
└── README.md                 # This file
```

## 🐛 Bugs Identified & Fixed

### Critical Issues Resolved:
1. **String Fare Conversion Errors**: Fixed handling of "$2097.46" format values
2. **Invalid Record Filtering**: Validation wasn't actually filtering out bad records  
3. **Missing Email Validation**: Email format validation existed but wasn't called
4. **Performance Bottlenecks**: Row-by-row processing with artificial delays
5. **Synchronous Email Processing**: Blocking email operations without concurrency

### Edge Cases Handled:
- Missing values (emails, phones, fares)
- Mixed data types (string vs numeric fares)
- Duplicate records
- Invalid airport codes
- Same origin/destination pairs
- Zero/negative fare amounts

## ⚡ Performance Optimizations

### Key Strategies:
1. **Vectorized Operations**: Replaced pandas row iteration with vectorized operations
2. **Concurrent Processing**: Implemented ThreadPoolExecutor for email sending
3. **Memory Management**: Added garbage collection and object cleanup
4. **Batch Processing**: Grouped operations to reduce overhead

### Results:
| Metric | Before | After | Improvement |
|--------|--------|-------|-------------|
| Runtime | 334.22s | 18.51s | **94.5% faster** |
| Throughput | 0.6 rec/s | 9.94 rec/s | **1560% improvement** |
| Memory | Variable | Stable 72MB | Consistent usage |

## 🚀 Quick Start

### Prerequisites
- Python 3.11+ 
- Virtual environment recommended

### Installation
```bash
git clone <repository-url>
cd RPA-Automation-Week-4
python -m venv .venv
source .venv/bin/activate  # On Windows: .venv\Scripts\activate
pip install pandas faker numpy psutil tenacity snakeviz
```

### Generate Test Data
```bash
cd data
python generate_sample_data.py
```

### Run Original vs Optimized
```bash
# Original (fixed) version
python main.py

# Optimized version  
python main_optimized.py

# Performance comparison
python performance_analysis.py
```

## 📊 Key Metrics

### Data Processing Results:
- **Total Records**: 205 (including intentional duplicates)
- **Valid Records**: 184 (after filtering invalid data)
- **Email Success Rate**: 97.8% (180/184 valid emails)
- **Processing Rate**: 9.94 records/second (optimized)

### Optimization Impact:
- **Data Processing**: 2.3s → 0.01s (99.5% faster)
- **Email Sending**: 189s → 18s (90% faster)  
- **Total Workflow**: 334s → 18.5s (94.5% faster)

## 📈 Profiling & Analysis

Performance profiling data available in:
- `automation_profile.prof` - Original version profiling
- `automation_optimized_profile.prof` - Optimized version profiling

View with snakeviz:
```bash
snakeviz automation_optimized_profile.prof
```

## 🛠️ Technical Highlights

### Vectorized Data Cleaning
```python
# Before: Row-by-row processing (slow)
for index, row in data.iterrows():
    processed_record = self._process_single_reservation(row)

# After: Vectorized operations (fast)
data_clean = data.drop_duplicates(subset=['PNR'], keep='first')
data_clean = data_clean[
    (data_clean['Origin'].isin(valid_airports)) & 
    (data_clean['Destination'].isin(valid_airports)) &
    (data_clean['Fare'] > 0)
]
```

### Concurrent Email Processing
```python
# Before: Synchronous sending
for reservation in reservations:
    send_email(reservation)
    time.sleep(0.1)  # Artificial delay

# After: Concurrent processing
with ThreadPoolExecutor(max_workers=5) as executor:
    futures = [executor.submit(send_email, reservation) 
               for reservation in reservations]
    results = [future.result() for future in as_completed(futures)]
```

## 📝 Documentation

Complete debugging and optimization documentation available in:
- [`docs/troubleshooting.md`](docs/troubleshooting.md) - Detailed error analysis and fixes
- Log files with performance metrics
- JSON reports with processing statistics

## 🎯 Learning Outcomes

This project demonstrates:
- **Systematic Debugging**: Identifying and fixing complex data processing errors
- **Performance Profiling**: Using cProfile and metrics to identify bottlenecks  
- **Optimization Strategies**: Vectorization, concurrency, and memory management
- **Production Readiness**: Error handling, logging, and monitoring
- **Documentation**: Clear tracking of problems, solutions, and improvements

## 🤝 Contributing

This is an educational project demonstrating debugging and optimization techniques. The intentional bugs and performance issues are designed to simulate real-world automation challenges.

---

**Author**: Muhammad Hassan Naeem  
**Course**: LR-Robotic Process Automation  
**Assignment**: Week 4 - Debug and Optimize Python Automation  
**Date**: August 2025
